/**
 * This file was automatically generated by Stylus and represents a Rust program.
 * For more information, please see [The Stylus SDK](https://github.com/OffchainLabs/stylus-sdk-rs).
 */

// SPDX-License-Identifier: MIT-OR-APACHE-2.0
pragma solidity ^0.8.23;

interface IDonly  {
    function createCategory(string calldata name) external returns (uint256);

    function getCategoryNameHash(uint256 category_id) external view returns (uint256);

    function isCategoryActive(uint256 category_id) external view returns (bool);

    function getCategoryCreator(uint256 category_id) external view returns (address);

    function getCategoryCount() external view returns (uint256);

    function deactivateCategory(uint256 category_id) external;

    function getCategoryName(uint256 category_id) external view returns (string memory);

    function verifyCategoryName(uint256 category_id, string calldata name) external view returns (bool);

    function getCampaignCount() external view returns (uint256);

    function createCampaign(uint256 category_id, string calldata title, string calldata description, string calldata image_url, address destination_wallet, uint256 max_sold_products) external returns (uint256);

    function getCampaignData(uint256 campaign_id) external view returns (uint256, uint256, uint256, uint256, address, address, uint256, uint256, uint256, bool, uint256, uint256, uint256);

    function isCampaignActive(uint256 campaign_id) external view returns (bool);

    function getCampaignStatus(uint256 campaign_id) external view returns (uint256);

    function generateCampaignId(string calldata title, address admin) external view returns (uint256);

    function isCampaignAdmin(uint256 campaign_id, address user) external view returns (bool);

    function deactivateCampaign(uint256 campaign_id) external returns (bool);

    function completeCampaign(uint256 campaign_id) external returns (bool);

    function getCampaignDestinationWallet(uint256 campaign_id) external view returns (address);

    function getCampaignTotalAmount(uint256 campaign_id) external view returns (uint256);

    function getCampaignSoldProductsCount(uint256 campaign_id) external view returns (uint256);

    function getProductCount() external view returns (uint256);

    function addProduct(string calldata name, string calldata description, string calldata image_url, uint256 price, uint256 campaign_id, uint256 category_id) external returns (uint256);

    function getProductData(uint256 product_id) external view returns (uint256, uint256, uint256, uint256, bool, bool, address, uint256, uint256, uint256, uint256);

    function isProductActive(uint256 product_id) external view returns (bool);

    function isProductSold(uint256 product_id) external view returns (bool);

    function purchaseProduct(uint256 product_id) external returns (bool);

    function updateCampaignStats(uint256 campaign_id, uint256 price) external;

    function deactivateRemainingProductsInCampaign(uint256 campaign_id) external;

    function getCampaignProgress(uint256 campaign_id) external view returns (uint256, uint256);

    function isCampaignGoalReached(uint256 campaign_id) external view returns (bool);

    function isProductOwner(uint256 product_id, address user) external view returns (bool);

    function deactivateProduct(uint256 product_id) external returns (bool);

    function getProductOwner(uint256 product_id) external view returns (address);

    function deactivateProductByOwner(uint256 product_id) external returns (bool);

    function deactivateProductByAdmin(uint256 product_id) external returns (bool);

    function canDeactivateProduct(uint256 product_id) external view returns (bool);
}
